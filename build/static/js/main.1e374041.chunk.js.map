{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","min","sec","button","setC","e","_this","setState","target","value","startC","curMin","interval","setInterval","nextMin","stopC","alert","nextSec","clearInterval","changeC","react_default","a","createElement","className","this","toString","length","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMA0FeA,6MAtFbC,MAAQ,CACNC,IAAK,EACLC,IAAK,EACLC,OAAQ,UAGVC,KAAO,SAACC,GACNC,EAAKC,SAAS,CACZN,IAAKI,EAAEG,OAAOC,MACdP,IAAK,EACLC,OAAQ,YAIZO,OAAS,WACP,IAAIC,EAASL,EAAKN,MAAMC,IACxBK,EAAKC,SAAS,CACZN,IAAKU,EACLT,IAAK,EACLC,OAAQ,SAEVG,EAAKM,SAAWC,YAAY,WAE1B,GAAsB,IAAnBP,EAAKN,MAAME,KAAgC,IAAnBI,EAAKN,MAAMC,IAAU,CAC9C,IAAIa,EAAUR,EAAKN,MAAMC,IAAM,EAE/BK,EAAKC,SAAS,CACZN,IAAKa,EACLZ,IAHY,GAIZC,OAAQ,cAEL,GAAuB,IAAnBG,EAAKN,MAAME,KAAgC,IAAnBI,EAAKN,MAAMC,IAE5CK,EAAKS,QACLC,MAAM,wBAED,CACL,IAAIF,EAAUR,EAAKN,MAAMC,IACrBgB,EAAUX,EAAKN,MAAME,IAAM,EAC/BI,EAAKC,SAAS,CACZN,IAAKa,EACLZ,IAAKe,EACLd,OAAQ,WAIX,QAGLY,MAAQ,WACNG,cAAcZ,EAAKM,UACnBN,EAAKC,SAAS,CACZN,IAAK,EACLC,IAAK,EACLC,OAAQ,YAOdgB,QAAU,SAACd,GACT,IAAIM,EAASL,EAAKN,MAAMC,IACL,MAAnBI,EAAEG,OAAOC,MAAgBE,EAAS,GAAKL,EAAKC,SAAS,CAACN,IAAKU,EAAS,IAAML,EAAKC,SAAS,CAACN,IAAKU,IAAWA,EAAS,EAAIL,EAAKC,SAAS,CAACN,IAAKU,EAAS,IAAML,EAAKC,SAAS,CAACN,IAAKU,6EAK3K,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,WAIAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAA0C,IAArCE,KAAKxB,MAAMC,IAAIwB,WAAWC,OAAe,IAAMF,KAAKxB,MAAMC,IAAMuB,KAAKxB,MAAMC,IAAhF,MAA6H,IAArCuB,KAAKxB,MAAME,IAAIuB,WAAWC,OAAe,IAAMF,KAAKxB,MAAME,IAAMsB,KAAKxB,MAAME,KACnKkB,EAAAC,EAAAC,cAAA,SAAOK,KAA4B,SAAtBH,KAAKxB,MAAMG,OAAoB,SAAW,SAAUyB,QAASJ,KAAKL,QAASV,MAAM,MAC9FW,EAAAC,EAAAC,cAAA,SAAOK,KAA4B,SAAtBH,KAAKxB,MAAMG,OAAoB,SAAW,SAAUyB,QAASJ,KAAKL,QAASV,MAAM,MAC9FW,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQM,QAA+B,SAAtBJ,KAAKxB,MAAMG,OAAoBqB,KAAKd,OAASc,KAAKT,OAAQS,KAAKxB,MAAMG,gBAlF5E0B,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e374041.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    min: 1,\r\n    sec: 0,\r\n    button: 'play'\r\n  }\r\n\r\n  setC = (e) => {\r\n    this.setState({\r\n      min: e.target.value,\r\n      sec: 0,\r\n      button: 'play'\r\n    })\r\n  }\r\n\r\n  startC = () => {\r\n    let curMin = this.state.min\r\n    this.setState({\r\n      min: curMin,\r\n      sec: 0,\r\n      button: 'stop'\r\n    })\r\n    this.interval = setInterval(() => {\r\n\r\n      if(this.state.sec === 0 && this.state.min !== 0){\r\n        let nextMin = this.state.min - 1\r\n        let nextSec = 59\r\n        this.setState({\r\n          min: nextMin,\r\n          sec: nextSec,\r\n          button: 'stop'\r\n        })\r\n      } else if (this.state.sec === 0 && this.state.min === 0) {\r\n\r\n        this.stopC();\r\n        alert('HEY. TIMER ENDED');\r\n\r\n      } else {\r\n        let nextMin = this.state.min\r\n        let nextSec = this.state.sec - 1\r\n        this.setState({\r\n          min: nextMin,\r\n          sec: nextSec,\r\n          button: 'stop'\r\n        })\r\n      }\r\n\r\n    }, 1000);\r\n  }\r\n\r\n  stopC = () => {\r\n    clearInterval(this.interval);\r\n    this.setState({\r\n      min: 1,\r\n      sec: 0,\r\n      button: 'play'\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\nchangeC = (e) => {\r\n  let curMin = this.state.min\r\n  e.target.value === '+' ? curMin < 99 ? this.setState({min: curMin + 1}) : this.setState({min: curMin}) : curMin > 1 ? this.setState({min: curMin - 1}) : this.setState({min: curMin})\r\n}\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Set timer and countdown</h1>\r\n        <br />\r\n        {\r\n        // <input type={this.state.button === 'play' ? \"number\" : \"hidden\"} min='1' max='99' name=\"setMin\" id=\"setMin\" value={this.state.min} onChange={this.setC} />\r\n        }\r\n        <br />\r\n        <h1>{this.state.min.toString().length === 1 ? '0' + this.state.min : this.state.min} : {this.state.sec.toString().length === 1 ? '0' + this.state.sec : this.state.sec}</h1>\r\n        <input type={this.state.button === 'play' ? \"button\" : \"hidden\"} onClick={this.changeC} value='-' />\r\n        <input type={this.state.button === 'play' ? \"button\" : \"hidden\"} onClick={this.changeC} value='+' />\r\n        <br />\r\n        <button onClick={this.state.button === 'play' ? this.startC : this.stopC}>{this.state.button}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}